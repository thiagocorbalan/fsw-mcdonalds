// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id               String         @id @default(uuid())
  name             String
  slug_url         String         @unique
  description      String
  avatar_image_url String
  cover_image_url  String
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  menu_categories  MenuCategory[]
  products         Product[]
  orders           Order[]
}

model MenuCategory {
  id            String     @id @default(uuid())
  name          String
  restaurant_id String
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  products      Product[]
}

model Product {
  id               String         @id @default(uuid())
  name             String
  description      String
  price            Float
  image_url        String
  ingredients      String[]
  restaurant       Restaurant     @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  restaurant_id    String
  menuCategory     MenuCategory   @relation(fields: [menu_category_id], references: [id], onDelete: Cascade)
  menu_category_id String
  order_products   OrderProduct[]
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
}

model Order {
  id                 Int               @id @default(autoincrement())
  total              Float
  status             OrderStatus
  restaurant         Restaurant        @relation(fields: [restaurants_id], references: [id], onDelete: Cascade)
  restaurants_id     String
  consumption_method ConsumptionMethod
  order_products     OrderProduct[]
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
}

model OrderProduct {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id   Int
  quantity   Int
  price      Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
}

enum ConsumptionMethod {
  TAKEAWAY
  DIVE_IN
}
